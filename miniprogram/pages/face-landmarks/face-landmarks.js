"use strict";var index=require("../../chunks/index.js");var tfjs=require("../../chunks/tfjs.js");const MESH_ANNOTATIONS={silhouette:[10,338,297,332,284,251,389,356,454,323,361,288,397,365,379,378,400,377,152,148,176,149,150,136,172,58,132,93,234,127,162,21,54,103,67,109],lipsUpperOuter:[61,185,40,39,37,0,267,269,270,409,291],lipsLowerOuter:[146,91,181,84,17,314,405,321,375,291],lipsUpperInner:[78,191,80,81,82,13,312,311,310,415,308],lipsLowerInner:[78,95,88,178,87,14,317,402,318,324,308],rightEyeUpper0:[246,161,160,159,158,157,173],rightEyeLower0:[33,7,163,144,145,153,154,155,133],rightEyeUpper1:[247,30,29,27,28,56,190],rightEyeLower1:[130,25,110,24,23,22,26,112,243],rightEyeUpper2:[113,225,224,223,222,221,189],rightEyeLower2:[226,31,228,229,230,231,232,233,244],rightEyeLower3:[143,111,117,118,119,120,121,128,245],rightEyebrowUpper:[156,70,63,105,66,107,55,193],rightEyebrowLower:[35,124,46,53,52,65],rightEyeIris:[473,474,475,476,477],leftEyeUpper0:[466,388,387,386,385,384,398],leftEyeLower0:[263,249,390,373,374,380,381,382,362],leftEyeUpper1:[467,260,259,257,258,286,414],leftEyeLower1:[359,255,339,254,253,252,256,341,463],leftEyeUpper2:[342,445,444,443,442,441,413],leftEyeLower2:[446,261,448,449,450,451,452,453,464],leftEyeLower3:[372,340,346,347,348,349,350,357,465],leftEyebrowUpper:[383,300,293,334,296,336,285,417],leftEyebrowLower:[265,353,276,283,282,295],leftEyeIris:[468,469,470,471,472],midwayBetweenEyes:[168],noseTip:[1],noseBottom:[2],noseRightCorner:[98],noseLeftCorner:[327],rightCheek:[205],leftCheek:[425]};function scaleBoxCoordinates(box,factor){const startPoint=[box.startPoint[0]*factor[0],box.startPoint[1]*factor[1]];const endPoint=[box.endPoint[0]*factor[0],box.endPoint[1]*factor[1]];return{startPoint:startPoint,endPoint:endPoint}}function getBoxSize(box){return[Math.abs(box.endPoint[0]-box.startPoint[0]),Math.abs(box.endPoint[1]-box.startPoint[1])]}function getBoxCenter(box){return[box.startPoint[0]+(box.endPoint[0]-box.startPoint[0])/2,box.startPoint[1]+(box.endPoint[1]-box.startPoint[1])/2]}function cutBoxFromImageAndResize(box,image,cropSize){const h=image.shape[1];const w=image.shape[2];const boxes=[[box.startPoint[1]/h,box.startPoint[0]/w,box.endPoint[1]/h,box.endPoint[0]/w]];return tfjs.image.cropAndResize(image,boxes,[0],cropSize,"bilinear",0)}function enlargeBox(box,factor=1.5){const center=getBoxCenter(box);const size=getBoxSize(box);const newHalfSize=[factor*size[0]/2,factor*size[1]/2];const startPoint=[center[0]-newHalfSize[0],center[1]-newHalfSize[1]];const endPoint=[center[0]+newHalfSize[0],center[1]+newHalfSize[1]];return{startPoint:startPoint,endPoint:endPoint,landmarks:box.landmarks}}function squarifyBox(box){const centers=getBoxCenter(box);const size=getBoxSize(box);const maxEdge=Math.max(...size);const halfSize=maxEdge/2;const startPoint=[centers[0]-halfSize,centers[1]-halfSize];const endPoint=[centers[0]+halfSize,centers[1]+halfSize];return{startPoint:startPoint,endPoint:endPoint,landmarks:box.landmarks}}const IDENTITY_MATRIX=[[1,0,0],[0,1,0],[0,0,1]];function normalizeRadians(angle){return angle-2*Math.PI*Math.floor((angle+Math.PI)/(2*Math.PI))}function computeRotation(point1,point2){const radians=Math.PI/2-Math.atan2(-(point2[1]-point1[1]),point2[0]-point1[0]);return normalizeRadians(radians)}function buildTranslationMatrix(x,y){return[[1,0,x],[0,1,y],[0,0,1]]}function dot(v1,v2){let product=0;for(let i=0;i<v1.length;i++){product+=v1[i]*v2[i]}return product}function getColumnFrom2DArr(arr,columnIndex){const column=[];for(let i=0;i<arr.length;i++){column.push(arr[i][columnIndex])}return column}function multiplyTransformMatrices(mat1,mat2){const product=[];const size=mat1.length;for(let row=0;row<size;row++){product.push([]);for(let col=0;col<size;col++){product[row].push(dot(mat1[row],getColumnFrom2DArr(mat2,col)))}}return product}function buildRotationMatrix(rotation,center){const cosA=Math.cos(rotation);const sinA=Math.sin(rotation);const rotationMatrix=[[cosA,-sinA,0],[sinA,cosA,0],[0,0,1]];const translationMatrix=buildTranslationMatrix(center[0],center[1]);const translationTimesRotation=multiplyTransformMatrices(translationMatrix,rotationMatrix);const negativeTranslationMatrix=buildTranslationMatrix(-center[0],-center[1]);return multiplyTransformMatrices(translationTimesRotation,negativeTranslationMatrix)}function invertTransformMatrix(matrix){const rotationComponent=[[matrix[0][0],matrix[1][0]],[matrix[0][1],matrix[1][1]]];const translationComponent=[matrix[0][2],matrix[1][2]];const invertedTranslation=[-dot(rotationComponent[0],translationComponent),-dot(rotationComponent[1],translationComponent)];return[rotationComponent[0].concat(invertedTranslation[0]),rotationComponent[1].concat(invertedTranslation[1]),[0,0,1]]}function rotatePoint(homogeneousCoordinate,rotationMatrix){return[dot(homogeneousCoordinate,rotationMatrix[0]),dot(homogeneousCoordinate,rotationMatrix[1])]}const LANDMARKS_COUNT=468;const UPDATE_REGION_OF_INTEREST_IOU_THRESHOLD=.25;const MESH_MOUTH_INDEX=13;const MESH_KEYPOINTS_LINE_OF_SYMMETRY_INDICES=[MESH_MOUTH_INDEX,MESH_ANNOTATIONS["midwayBetweenEyes"][0]];const BLAZEFACE_MOUTH_INDEX=3;const BLAZEFACE_NOSE_INDEX=2;const BLAZEFACE_KEYPOINTS_LINE_OF_SYMMETRY_INDICES=[BLAZEFACE_MOUTH_INDEX,BLAZEFACE_NOSE_INDEX];const LEFT_EYE_OUTLINE=MESH_ANNOTATIONS["leftEyeLower0"];const LEFT_EYE_BOUNDS=[LEFT_EYE_OUTLINE[0],LEFT_EYE_OUTLINE[LEFT_EYE_OUTLINE.length-1]];const RIGHT_EYE_OUTLINE=MESH_ANNOTATIONS["rightEyeLower0"];const RIGHT_EYE_BOUNDS=[RIGHT_EYE_OUTLINE[0],RIGHT_EYE_OUTLINE[RIGHT_EYE_OUTLINE.length-1]];const IRIS_UPPER_CENTER_INDEX=3;const IRIS_LOWER_CENTER_INDEX=4;const IRIS_IRIS_INDEX=71;const IRIS_NUM_COORDINATES=76;const ENLARGE_EYE_RATIO=2.3;const IRIS_MODEL_INPUT_SIZE=64;const MESH_TO_IRIS_INDICES_MAP=[{key:"EyeUpper0",indices:[9,10,11,12,13,14,15]},{key:"EyeUpper1",indices:[25,26,27,28,29,30,31]},{key:"EyeUpper2",indices:[41,42,43,44,45,46,47]},{key:"EyeLower0",indices:[0,1,2,3,4,5,6,7,8]},{key:"EyeLower1",indices:[16,17,18,19,20,21,22,23,24]},{key:"EyeLower2",indices:[32,33,34,35,36,37,38,39,40]},{key:"EyeLower3",indices:[54,55,56,57,58,59,60,61,62]},{key:"EyebrowUpper",indices:[63,64,65,66,67,68,69,70]},{key:"EyebrowLower",indices:[48,49,50,51,52,53]}];function replaceRawCoordinates(rawCoords,newCoords,prefix,keys){for(let i=0;i<MESH_TO_IRIS_INDICES_MAP.length;i++){const{key:key,indices:indices}=MESH_TO_IRIS_INDICES_MAP[i];const originalIndices=MESH_ANNOTATIONS[`${prefix}${key}`];const shouldReplaceAllKeys=keys==null;if(shouldReplaceAllKeys||keys.includes(key)){for(let j=0;j<indices.length;j++){const index=indices[j];rawCoords[originalIndices[j]]=[newCoords[index][0],newCoords[index][1],(newCoords[index][2]+rawCoords[originalIndices[j]][2])/2]}}}}class Pipeline{constructor(boundingBoxDetector,meshDetector,meshWidth,meshHeight,maxContinuousChecks,maxFaces,irisModel){this.regionsOfInterest=[];this.runsWithoutFaceDetector=0;this.boundingBoxDetector=boundingBoxDetector;this.meshDetector=meshDetector;this.irisModel=irisModel;this.meshWidth=meshWidth;this.meshHeight=meshHeight;this.maxContinuousChecks=maxContinuousChecks;this.maxFaces=maxFaces}transformRawCoords(rawCoords,box,angle,rotationMatrix){const boxSize=getBoxSize({startPoint:box.startPoint,endPoint:box.endPoint});const scaleFactor=[boxSize[0]/this.meshWidth,boxSize[1]/this.meshHeight];const coordsScaled=rawCoords.map((coord=>[scaleFactor[0]*(coord[0]-this.meshWidth/2),scaleFactor[1]*(coord[1]-this.meshHeight/2),coord[2]]));const coordsRotationMatrix=buildRotationMatrix(angle,[0,0]);const coordsRotated=coordsScaled.map((coord=>[...rotatePoint(coord,coordsRotationMatrix),coord[2]]));const inverseRotationMatrix=invertTransformMatrix(rotationMatrix);const boxCenter=[...getBoxCenter({startPoint:box.startPoint,endPoint:box.endPoint}),1];const originalBoxCenter=[dot(boxCenter,inverseRotationMatrix[0]),dot(boxCenter,inverseRotationMatrix[1])];return coordsRotated.map((coord=>[coord[0]+originalBoxCenter[0],coord[1]+originalBoxCenter[1],coord[2]]))}getLeftToRightEyeDepthDifference(rawCoords){const leftEyeZ=rawCoords[LEFT_EYE_BOUNDS[0]][2];const rightEyeZ=rawCoords[RIGHT_EYE_BOUNDS[0]][2];return leftEyeZ-rightEyeZ}getEyeBox(rawCoords,face,eyeInnerCornerIndex,eyeOuterCornerIndex,flip=false){const box=squarifyBox(enlargeBox(this.calculateLandmarksBoundingBox([rawCoords[eyeInnerCornerIndex],rawCoords[eyeOuterCornerIndex]]),ENLARGE_EYE_RATIO));const boxSize=getBoxSize(box);let crop=tfjs.image.cropAndResize(face,[[box.startPoint[1]/this.meshHeight,box.startPoint[0]/this.meshWidth,box.endPoint[1]/this.meshHeight,box.endPoint[0]/this.meshWidth]],[0],[IRIS_MODEL_INPUT_SIZE,IRIS_MODEL_INPUT_SIZE]);if(flip){crop=tfjs.image.flipLeftRight(crop)}return{box:box,boxSize:boxSize,crop:crop}}getEyeCoords(eyeData,eyeBox,eyeBoxSize,flip=false){const eyeRawCoords=[];for(let i=0;i<IRIS_NUM_COORDINATES;i++){const x=eyeData[i*3];const y=eyeData[i*3+1];const z=eyeData[i*3+2];eyeRawCoords.push([(flip?1-x/IRIS_MODEL_INPUT_SIZE:x/IRIS_MODEL_INPUT_SIZE)*eyeBoxSize[0]+eyeBox.startPoint[0],y/IRIS_MODEL_INPUT_SIZE*eyeBoxSize[1]+eyeBox.startPoint[1],z])}return{rawCoords:eyeRawCoords,iris:eyeRawCoords.slice(IRIS_IRIS_INDEX)}}getAdjustedIrisCoords(rawCoords,irisCoords,direction){const upperCenterZ=rawCoords[MESH_ANNOTATIONS[`${direction}EyeUpper0`][IRIS_UPPER_CENTER_INDEX]][2];const lowerCenterZ=rawCoords[MESH_ANNOTATIONS[`${direction}EyeLower0`][IRIS_LOWER_CENTER_INDEX]][2];const averageZ=(upperCenterZ+lowerCenterZ)/2;return irisCoords.map(((coord,i)=>{let z=averageZ;if(i===2){z=upperCenterZ}else if(i===4){z=lowerCenterZ}return[coord[0],coord[1],z]}))}predict(input,predictIrises){if(this.shouldUpdateRegionsOfInterest()){const returnTensors=false;const annotateFace=true;const{boxes:boxes,scaleFactor:scaleFactor}=this.boundingBoxDetector.getBoundingBoxes(input,returnTensors,annotateFace);if(boxes.length===0){this.regionsOfInterest=[];return null}const scaledBoxes=boxes.map((prediction=>{const predictionBoxCPU={startPoint:tfjs.squeeze(prediction.box.startPoint).arraySync(),endPoint:tfjs.squeeze(prediction.box.endPoint).arraySync()};const scaledBox=scaleBoxCoordinates(predictionBoxCPU,scaleFactor);const enlargedBox=enlargeBox(scaledBox);const squarifiedBox=squarifyBox(enlargedBox);return{...squarifiedBox,landmarks:prediction.landmarks.arraySync()}}));boxes.forEach((box=>{if(box!=null&&box.startPoint!=null){box.startEndTensor.dispose();box.startPoint.dispose();box.endPoint.dispose()}}));this.updateRegionsOfInterest(scaledBoxes);this.runsWithoutFaceDetector=0}else{this.runsWithoutFaceDetector++}return tfjs.tidy((()=>this.regionsOfInterest.map(((box,i)=>{let angle=0;const boxLandmarksFromMeshModel=box.landmarks.length>=LANDMARKS_COUNT;let[indexOfMouth,indexOfForehead]=MESH_KEYPOINTS_LINE_OF_SYMMETRY_INDICES;if(boxLandmarksFromMeshModel===false){[indexOfMouth,indexOfForehead]=BLAZEFACE_KEYPOINTS_LINE_OF_SYMMETRY_INDICES}angle=computeRotation(box.landmarks[indexOfMouth],box.landmarks[indexOfForehead]);const faceCenter=getBoxCenter({startPoint:box.startPoint,endPoint:box.endPoint});const faceCenterNormalized=[faceCenter[0]/input.shape[2],faceCenter[1]/input.shape[1]];let rotatedImage=input;let rotationMatrix=IDENTITY_MATRIX;if(angle!==0){rotatedImage=tfjs.image.rotateWithOffset(input,angle,0,faceCenterNormalized);rotationMatrix=buildRotationMatrix(-angle,faceCenter)}const boxCPU={startPoint:box.startPoint,endPoint:box.endPoint};const face=tfjs.div(cutBoxFromImageAndResize(boxCPU,rotatedImage,[this.meshHeight,this.meshWidth]),255);const[,flag,coords]=this.meshDetector.predict(face);const coordsReshaped=tfjs.reshape(coords,[-1,3]);let rawCoords=coordsReshaped.arraySync();if(predictIrises){const{box:leftEyeBox,boxSize:leftEyeBoxSize,crop:leftEyeCrop}=this.getEyeBox(rawCoords,face,LEFT_EYE_BOUNDS[0],LEFT_EYE_BOUNDS[1],true);const{box:rightEyeBox,boxSize:rightEyeBoxSize,crop:rightEyeCrop}=this.getEyeBox(rawCoords,face,RIGHT_EYE_BOUNDS[0],RIGHT_EYE_BOUNDS[1]);const eyePredictions=this.irisModel.predict(tfjs.concat([leftEyeCrop,rightEyeCrop]));const eyePredictionsData=eyePredictions.dataSync();const leftEyeData=eyePredictionsData.slice(0,IRIS_NUM_COORDINATES*3);const{rawCoords:leftEyeRawCoords,iris:leftIrisRawCoords}=this.getEyeCoords(leftEyeData,leftEyeBox,leftEyeBoxSize,true);const rightEyeData=eyePredictionsData.slice(IRIS_NUM_COORDINATES*3);const{rawCoords:rightEyeRawCoords,iris:rightIrisRawCoords}=this.getEyeCoords(rightEyeData,rightEyeBox,rightEyeBoxSize);const leftToRightEyeDepthDifference=this.getLeftToRightEyeDepthDifference(rawCoords);if(Math.abs(leftToRightEyeDepthDifference)<30){replaceRawCoordinates(rawCoords,leftEyeRawCoords,"left");replaceRawCoordinates(rawCoords,rightEyeRawCoords,"right")}else if(leftToRightEyeDepthDifference<1){replaceRawCoordinates(rawCoords,leftEyeRawCoords,"left",["EyeUpper0","EyeLower0"])}else{replaceRawCoordinates(rawCoords,rightEyeRawCoords,"right",["EyeUpper0","EyeLower0"])}const adjustedLeftIrisCoords=this.getAdjustedIrisCoords(rawCoords,leftIrisRawCoords,"left");const adjustedRightIrisCoords=this.getAdjustedIrisCoords(rawCoords,rightIrisRawCoords,"right");rawCoords=rawCoords.concat(adjustedLeftIrisCoords).concat(adjustedRightIrisCoords)}const transformedCoordsData=this.transformRawCoords(rawCoords,box,angle,rotationMatrix);const transformedCoords=tfjs.tensor2d(transformedCoordsData);const landmarksBox=enlargeBox(this.calculateLandmarksBoundingBox(transformedCoordsData));const squarifiedLandmarksBox=squarifyBox(landmarksBox);this.regionsOfInterest[i]={...squarifiedLandmarksBox,landmarks:transformedCoords.arraySync()};const prediction={coords:tfjs.tensor2d(rawCoords,[rawCoords.length,3]),scaledCoords:transformedCoords,box:landmarksBox,flag:tfjs.squeeze(flag)};return prediction}))))}updateRegionsOfInterest(boxes){for(let i=0;i<boxes.length;i++){const box=boxes[i];const previousBox=this.regionsOfInterest[i];let iou=0;if(previousBox&&previousBox.startPoint){const[boxStartX,boxStartY]=box.startPoint;const[boxEndX,boxEndY]=box.endPoint;const[previousBoxStartX,previousBoxStartY]=previousBox.startPoint;const[previousBoxEndX,previousBoxEndY]=previousBox.endPoint;const xStartMax=Math.max(boxStartX,previousBoxStartX);const yStartMax=Math.max(boxStartY,previousBoxStartY);const xEndMin=Math.min(boxEndX,previousBoxEndX);const yEndMin=Math.min(boxEndY,previousBoxEndY);const intersection=(xEndMin-xStartMax)*(yEndMin-yStartMax);const boxArea=(boxEndX-boxStartX)*(boxEndY-boxStartY);const previousBoxArea=(previousBoxEndX-previousBoxStartX)*(previousBoxEndY-boxStartY);iou=intersection/(boxArea+previousBoxArea-intersection)}if(iou<UPDATE_REGION_OF_INTEREST_IOU_THRESHOLD){this.regionsOfInterest[i]=box}}this.regionsOfInterest=this.regionsOfInterest.slice(0,boxes.length)}clearRegionOfInterest(index){if(this.regionsOfInterest[index]!=null){this.regionsOfInterest=[...this.regionsOfInterest.slice(0,index),...this.regionsOfInterest.slice(index+1)]}}shouldUpdateRegionsOfInterest(){const roisCount=this.regionsOfInterest.length;const noROIs=roisCount===0;if(this.maxFaces===1||noROIs){return noROIs}return roisCount!==this.maxFaces&&this.runsWithoutFaceDetector>=this.maxContinuousChecks}calculateLandmarksBoundingBox(landmarks){const xs=landmarks.map((d=>d[0]));const ys=landmarks.map((d=>d[1]));const startPoint=[Math.min(...xs),Math.min(...ys)];const endPoint=[Math.max(...xs),Math.max(...ys)];return{startPoint:startPoint,endPoint:endPoint}}}constconst FACEMESH_GRAPHMODEL_PATH="https://tfhub.dev/mediapipe/tfjs-model/facemesh/1/default/1";const IRIS_GRAPHMODEL_PATH="https://tfhub.dev/mediapipe/tfjs-model/iris/1/default/2";const MESH_MODEL_INPUT_WIDTH=192;const MESH_MODEL_INPUT_HEIGHT=192;const PREDICTION_VALUES="MediaPipePredictionValues";const PREDICTION_TENSORS="MediaPipePredictionTensors";async function load$1(config){const{maxContinuousChecks:maxContinuousChecks=5,detectionConfidence:detectionConfidence=.9,maxFaces:maxFaces=10,iouThreshold:iouThreshold=.3,scoreThreshold:scoreThreshold=.75,shouldLoadIrisModel:shouldLoadIrisModel=true,modelUrl:modelUrl,detectorModelUrl:detectorModelUrl,irisModelUrl:irisModelUrl}=config;let models;if(shouldLoadIrisModel){models=await Promise.all([loadDetectorModel(detectorModelUrl,maxFaces,iouThreshold,scoreThreshold),loadMeshModel(modelUrl),loadIrisModel(irisModelUrl)])}else{models=await Promise.all([loadDetectorModel(detectorModelUrl,maxFaces,iouThreshold,scoreThreshold),loadMeshModel(modelUrl)])}const faceMesh=new FaceMesh(models[0],models[1],maxContinuousChecks,detectionConfidence,maxFaces,shouldLoadIrisModel?models[2]:null);return faceMesh}async function loadDetectorModel(modelUrl,maxFaces,iouThreshold,scoreThreshold){return index.load({modelUrl:modelUrl,maxFaces:maxFaces,iouThreshold:iouThreshold,scoreThreshold:scoreThreshold})}async function loadMeshModel(modelUrl){if(modelUrl!=null){return tfjs.loadGraphModel(modelUrl)}return tfjs.loadGraphModel(FACEMESH_GRAPHMODEL_PATH,{fromTFHub_:true})}async function loadIrisModel(modelUrl){if(modelUrl!=null){return tfjs.loadGraphModel(modelUrl)}return tfjs.loadGraphModel(IRIS_GRAPHMODEL_PATH,{fromTFHub:true})}function getInputTensorDimensions(input){return input instanceof tfjs.Tensor?[input.shape[0],input.shape[1]]:[input.height,input.width]}function flipFaceHorizontal(face,imageWidth){if(face.mesh instanceof tfjs.Tensor){const[topLeft,bottomRight,mesh,scaledMesh]=tfjs.tidy((()=>{const subtractBasis=tfjs.tensor1d([imageWidth-1,0,0]);const multiplyBasis=tfjs.tensor1d([1,-1,1]);return tfjs.tidy((()=>[tfjs.concat([tfjs.sub(imageWidth-1,tfjs.slice(face.boundingBox.topLeft,0,1)),tfjs.slice(face.boundingBox.topLeft,1,1)]),tfjs.concat([tfjs.sub(imageWidth-1,tfjs.slice(face.boundingBox.bottomRight,0,1)),tfjs.slice(face.boundingBox.bottomRight,1,1)]),tfjs.mul(tfjs.sub(subtractBasis,face.mesh),multiplyBasis),tfjs.mul(tfjs.sub(subtractBasis,face.scaledMesh),multiplyBasis)]))}));return Object.assign({},face,{boundingBox:{topLeft:topLeft,bottomRight:bottomRight},mesh:mesh,scaledMesh:scaledMesh})}return Object.assign({},face,{boundingBox:{topLeft:[imageWidth-1-face.boundingBox.topLeft[0],face.boundingBox.topLeft[1]],bottomRight:[imageWidth-1-face.boundingBox.bottomRight[0],face.boundingBox.bottomRight[1]]},mesh:face.mesh.map((coord=>{const flippedCoord=coord.slice(0);flippedCoord[0]=imageWidth-1-coord[0];return flippedCoord})),scaledMesh:face.scaledMesh.map((coord=>{const flippedCoord=coord.slice(0);flippedCoord[0]=imageWidth-1-coord[0];return flippedCoord}))})}class FaceMesh{constructor(blazeFace,blazeMeshModel,maxContinuousChecks,detectionConfidence,maxFaces,irisModel){this.kind="MediaPipeFaceMesh";this.pipeline=new Pipeline(blazeFace,blazeMeshModel,MESH_MODEL_INPUT_WIDTH,MESH_MODEL_INPUT_HEIGHT,maxContinuousChecks,maxFaces,irisModel);this.detectionConfidence=detectionConfidence}static getAnnotations(){return MESH_ANNOTATIONS}static getUVCoords(){return UV_COORDS}estimateFaces(config){const{returnTensors:returnTensors=false,flipHorizontal:flipHorizontal=false,predictIrises:predictIrises=true}=config;let input=config.input;if(predictIrises&&this.pipeline.irisModel==null){throw new Error("The iris model was not loaded as part of facemesh. Please initialize the model with facemesh.load({shouldLoadIrisModel: true}).")}const[,width]=getInputTensorDimensions(input);const image=tfjs.tidy((()=>{if(!(input instanceof tfjs.Tensor)){input=tfjs.fromPixels(input)}return tfjs.expandDims(tfjs.cast(input,"float32"),0)}));let predictions;if(tfjs.getBackend()==="webgl"){const savedWebglPackDepthwiseConvFlag=tfjs.env().get("WEBGL_PACK_DEPTHWISECONV");tfjs.env().set("WEBGL_PACK_DEPTHWISECONV",true);predictions=this.pipeline.predict(image,predictIrises);tfjs.env().set("WEBGL_PACK_DEPTHWISECONV",savedWebglPackDepthwiseConvFlag)}else{predictions=this.pipeline.predict(image,predictIrises)}image.dispose();if(predictions!=null&&predictions.length>0){return predictions.map(((prediction,i)=>{const{coords:coords,scaledCoords:scaledCoords,box:box,flag:flag}=prediction;let tensorsToRead=[flag];if(!returnTensors){tensorsToRead=tensorsToRead.concat([coords,scaledCoords])}const tensorValues=tensorsToRead.map((d=>d.arraySync()));const flagValue=tensorValues[0];flag.dispose();if(flagValue<this.detectionConfidence){this.pipeline.clearRegionOfInterest(i)}if(returnTensors){const annotatedPrediction2={kind:PREDICTION_TENSORS,faceInViewConfidence:flagValue,mesh:coords,scaledMesh:scaledCoords,boundingBox:{topLeft:tfjs.tensor1d(box.startPoint),bottomRight:tfjs.tensor1d(box.endPoint)}};if(flipHorizontal){return flipFaceHorizontal(annotatedPrediction2,width)}return annotatedPrediction2}const[coordsArr,coordsArrScaled]=tensorValues.slice(1);scaledCoords.dispose();coords.dispose();let annotatedPrediction={kind:PREDICTION_VALUES,faceInViewConfidence:flagValue,boundingBox:{topLeft:box.startPoint,bottomRight:box.endPoint},mesh:coordsArr,scaledMesh:coordsArrScaled};if(flipHorizontal){annotatedPrediction=flipFaceHorizontal(annotatedPrediction,width)}const annotations={};for(const key in MESH_ANNOTATIONS){if(predictIrises||key.includes("Iris")===false){annotations[key]=MESH_ANNOTATIONS[key].map((index=>annotatedPrediction.scaledMesh[index]))}}annotatedPrediction["annotations"]=annotations;return annotatedPrediction}))}return[]}}var SupportedPackages;(function(SupportedPackages2){SupportedPackages2["mediapipeFacemesh"]="mediapipe-facemesh"})(SupportedPackages||(SupportedPackages={}));async function load(pkg=SupportedPackages.mediapipeFacemesh,config={}){if(pkg===SupportedPackages.mediapipeFacemesh){return load$1(config)}else{throw new Error(`${pkg} is not a valid package name.`)}}const NUM_KEYPOINTS=468;const GREEN="#32EEDB";const RED="#FF2C35";function distance(a,b){return Math.sqrt(Math.pow(a[0]-b[0],2)+Math.pow(a[1]-b[1],2))}Page({helper:null,async onReady(){console.log("face-landmarks onReady");await tfjs.ready();console.log("tf ready");const helper=this.selectComponent("#helper");console.log("face-landmarks load start");const model=await load(SupportedPackages.mediapipeFacemesh,{maxFaces:1,modelUrl:"https://cdn.static.oppenlab.com/weblf/test/facemesh/model.json",shouldLoadIrisModel:false});console.log("face-landmarks load end");const onFrame=(frame,deps)=>{const{ctx:ctx}=deps;const video={width:frame.width,height:frame.height,data:new Uint8Array(frame.data)};const t=Date.now();const predictions=model.estimateFaces({input:video,returnTensors:false,flipHorizontal:false,predictIrises:false});console.log("predict cost",Date.now()-t);helper.drawCanvas2D(frame);if(predictions.length>0){predictions.forEach((prediction=>{const keypoints=prediction.scaledMesh;ctx.fillStyle=GREEN;for(let i=0;i<NUM_KEYPOINTS;i++){const x=keypoints[i][0];const y=keypoints[i][1];ctx.beginPath();ctx.arc(x,y,1,0,2*Math.PI);ctx.fill()}if(keypoints.length>NUM_KEYPOINTS){ctx.strokeStyle=RED;ctx.lineWidth=1;const leftCenter=keypoints[NUM_KEYPOINTS];const leftDiameterY=distance(keypoints[NUM_KEYPOINTS+4],keypoints[NUM_KEYPOINTS+2]);const leftDiameterX=distance(keypoints[NUM_KEYPOINTS+3],keypoints[NUM_KEYPOINTS+1]);ctx.beginPath();ctx.ellipse(leftCenter[0],leftCenter[1],leftDiameterX/2,leftDiameterY/2,0,0,2*Math.PI);ctx.stroke()}}))}};helper.set({onFrame:onFrame});this.helper=helper},onShow:function(){var _a;(_a=this.helper)==null?void 0:_a.start()},onHide:function(){var _a;(_a=this.helper)==null?void 0:_a.stop()},onUnload:function(){},onShareAppMessage:function(){}});
